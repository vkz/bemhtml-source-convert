var xjst = require('xjst'),
    XJSTParser = xjst.XJSTParser,
    XJSTIdentity = xjst.XJSTIdentity,
    XJSTCompiler = xjst.XJSTCompiler,
    Jail = require('./jail').Jail,
    ometajs = require('ometajs'),
    lo = require('lodash');

var vkz ={};

vkz.freshClassObj = function freshClassObj() {return {c1: [], c2: [], c3: [], pr:{}};};

// checks if a tree (array) contains a given subtree (array)
vkz.contains = function contains(tree, sub) {
    var amI = lo.isEqual(tree, sub);
    var isAnyNode = lo.some(tree,
                            function(t) {
                                return lo.isArray(t) && contains(t, sub);
                            });
    return amI || isAnyNode;
}

vkz.addAsgnExpr = function addAsgnExpr(obj, e) {
    if (typeof obj._class.asgnExpr === 'undefined') { obj._class.asgnExpr = [];}
    obj._class.asgnExpr.push(e);
    vkz.contains(e, BEMHTMLParser.matchAll ('this.ctx', 'asgnExpr')) ?
        vkz.addClass(obj, '3.2') :
        vkz.addClass(obj, '3.1');
    return e;
}

vkz.addStmt = function addStmt(obj, e) {
    if (typeof obj._class.stmt === 'undefined') { obj._class.stmt = [];}
    obj._class.stmt.push(e);
    vkz.addClass (obj, '3.3');
    return e;
}

vkz.addBody = function addBody(obj, e) {
    if (typeof obj._class.body === 'undefined') { obj._class.body = [];}
    obj._class.body.push(e);
    return e;
}

vkz.addPredicate = function addPredicate(obj, ast) {
    var prAsString = typeof ast === 'string' ? ast : XJSTCompiler.match(ast, 'trans');
    obj._class.pr[prAsString] = ast;

    if(vkz.hasThisCtx (prAsString)) {vkz.addClass (obj, '2.1');};
    if(vkz.hasBemFields (prAsString)) {vkz.addClass (obj, '2.2');};
    if(vkz.hasCustomFields (prAsString)) {vkz.addClass (obj, '2.3');};
    return ast;
};

vkz.addClass = function addClass(obj, subClass) {
    var classBucket = "c" + subClass.split(".").shift(); // subClass is "1.2" ==> "1" ==> "c1"
    obj._class[classBucket].push(subClass);
};

vkz._bemFields = {
    'block':    /this\.block\b/i,
    'elem':     /this\.elem\b/i,
    'mods':     /this\.mods\b/i,
    'elemMods': /this\.elemMods\b/i,
    '_mode':    /this\._mode\b/i,
    '_buf':     /this\._buf\b/i
};

vkz.hasCustomFields = function hasCustomFields(prAsString) {
    var fields = prAsString.match(/this._\w*/ig) || [];
    fields = fields.filter(function (field) {
        return !(field.match (vkz._bemFields['_mode']) ||
                 field.match (vkz._bemFields['_buf']))});
    return !lo.isEmpty(fields);
};

vkz.hasBemFields = function hasBemFields(prAsString) {
    return lo.some(vkz._bemFields, function (key, rx) {
        return !!prAsString.match(rx);
    });
};

vkz.hasThisCtx = function hasThisCtx(prAsString) {
    return !!prAsString.match(/this.ctx\b/i);
};

ometa BEMHTMLParser <: XJSTParser {
  isKeyword = :x ?(x === 'applyCtx')
            | ^isKeyword,

  bemMatch = bemBlock | bemElem | bemMod,

  bemVal = (letter | digit | '-')+:xs -> [#string, xs.join('')],
  bemVal = asgnExpr:e -> e,

  bemPredic :n = spaces seq(n):nn space+ -> nn,

  bemBlock = bemPredic('block'):n bemVal:v -> [#block, v],
  bemElem = bemPredic('elem') bemVal:v -> [#elem, v],
  bemModVal = iName:n ?(n === 'true' || n === 'false') -> [#get, n]
            | bemVal,
  bemMod = bemPredic('mod') bemVal:m space+ bemModVal:v -> [#blockMod, m, v],
  bemMod = bemPredic('elemMod') bemVal:m space+ bemModVal:v -> [#elemMod, m, v],

  bemCustom = asgnExpr:e -> [#xjst, e],

  bemhtmlSet = spaces <letter (letter | digit | '-' | '_')*>:nn
               &(spaces ('{' | ':' | ','))
               ?(!BEMHTMLParser._isPrimitive(nn))
               -> [ nn ],

  bemMatchAndSet = (bemMatch
                    | bemhtmlSet:e -> { vkz.addPredicate(this, e[0]); return e;}
                    | bemCustom:e -> {
                        vkz.addPredicate(this, e[1]);
                        return e;} ),
  listBemMatchAndSet %(this.predicates = []) = bemMatchAndSet:t spaces
                     ( ',' spaces listBemMatchAndSet:ts -> {
                       BEMHTMLParser._concatChildren(t, ts)
                     } | '{' spaces listBemMatchAndSet+:ts spaces '}'
                          spaces -> {
                             vkz.addClass(this, "1.2");
                             BEMHTMLParser._concatChildren(t, [#sub, ts])
                     } | ':' (asgnExpr:e {vkz.addAsgnExpr(this, e)} -> [#begin, [#return, e]]
                             | stmt:e {vkz.addStmt(this, e)}):c ','? { vkz.addClass(this, "1.1")} ->
                       // vkz.addBody(this, {"preJail": c});
                       // vkz.addBody(this, {"Jailed":
                       //              (Jail.match(c, 'topLevel', ['_$' + (BEMHTMLParser._jailId + 1).toString(36)]))});
                       [t, [#body, Jail.match(
                         c,
                         'topLevel',
                         ['_$' + (BEMHTMLParser._jailId++).toString(36)]
                       )]]
                     ):r -> {
                       if (this.predicates.length === 0) return r;
                       BEMHTMLParser._concatChildren(
                         [#xjst, this.predicates],
                         r
                       )
                     } | ^stmt:r -> [#stmt, r],

  applyMode :type = "apply" "(" expr:e ")"
                    { BEMHTMLParser._transMode(e) }:modded_e
                    applyFactory([type, modded_e]):r -> r
                  | "applyNext" "(" expr:e ")"
                    { BEMHTMLParser._transMode(e) }:modded_e
                    applyFactory([type, #next, modded_e]):r -> r,

  applyCtx :type "applyCtx" "(" expr:ctx ")" = {
        BEMHTMLParser._transMode([
          #binop, ',',
          [#set, [#getp, [#string, 'ctx'], [#this] ], ctx],
          [#string, '']
        ])
      }:modded_e
      applyFactory([type, #next, modded_e]):r -> r,

  primExprHd = applyMode(#expr):r -> r
             | applyCtx(#expr):r -> r
             | ^primExprHd,

  stmt       = applyMode(#stmt):r -> r
             | applyCtx(#stmt):r -> r
             | ^stmt,

    topLevel %( this._class = vkz.freshClassObj() ) = listBemMatchAndSet*:ts spaces end -> {
      [].concat([this._class],
                BEMHTMLParser._addElemPredic (BEMHTMLParser._dropAllSubs(ts)))
  }
}

BEMHTMLParser._jailId = 0;

BEMHTMLParser._testMe = 1;

BEMHTMLParser._transMode = function transMode(e) {
    function traverse(e) {
    if (e[0] !== 'binop' && e[1] !== ',') return [ e ];
    return [].concat(traverse(e[2]), traverse(e[3]));
  }

  return traverse(e).map(function (e) {
    if (e[0] !== 'string') return e;
    return [#set, [#getp, [#string, '_mode'], [#this]], e];
  }).reduce(function (acc, current) {
    return [#binop, ',', acc, current];
  });
};

BEMHTMLParser._primitives = {
  'true': true,
  'false': true,
  'null': true,
  'undefined': true,
  'NaN': true,
  'Infinity': true
};

BEMHTMLParser._isPrimitive = function(name) {
  return BEMHTMLParser._primitives[name];
};

BEMHTMLParser._concatChildren = function(p, cs) {
  if (cs[0] !== 'sub') return [p].concat(cs);

  return [#sub, [].concat.apply([], cs[1].map(function(cs) {
    var cc = BEMHTMLParser._concatChildren(p, cs);
    return cc[0] === 'sub' ? cc[1] : [cc];
  }))];
};

BEMHTMLParser._dropAllSubs = function(ts) {
  return [].concat.apply([], ts.map(function(t) {
    return t[0] === 'sub' ? t[1] : [t];
  }));
};

BEMHTMLParser._addElemPredic = function(ts) {
  function isSafePredic(p) {
    switch (p[0]) {
      case 'get':
      case 'string':
      case 'number':
        return true;
      case 'getp':
        // Either this["some not elem property"],
        // or (some other host)["any property"]
        return p[2][0] === 'this' ?
            p[1][0] !== 'call' &&
            (p[1][0] !== 'string' || p[1][1] !== 'elem')
            :
            p[2][0] !== 'call';
      case 'unop':
        return isSafePredic(p[2]);
      case 'binop':
        return isSafePredic(p[2]) && isSafePredic(p[3]);
      default:
        return false;
    }
  }

  ts.forEach(function(t) {
    var isBlock,
        isNotElem;

    isBlock = t.some(function(p) {
      return p[0] === 'block';
    });

    if (!isBlock) return;

    isNotElem = t.every(function(p) {
      if (p[0] === 'elem' ||
          p[0] === 'xjst' && !isSafePredic(p[1])) {
        return false;
      }

      return true;
    });

    if (!isNotElem) return;

    t.unshift([
      'xjst',
      ['unop', '!', ['getp', ['string', 'elem'], ['this']]]
    ]);
  });
  return ts;
};

ometa BEMHTMLToXJST <: XJSTIdentity {
  bhPredic = [#block :e] -> [
    #binop, '===',
    [#getp, [#string, 'block'], [#this]],
    e
  ],
  bhPredic = [#blockMod :m :v] -> [
    #binop, '&&',
    [#getp, [#string, 'mods'], [#this]],
    [ #binop, '===',
      [#getp, m, [#getp, [#string, 'mods'], [#this]]],
      v
    ]
  ],
  bhPredic = [#elem :e] -> [
    #binop, '===',
    [#getp, [#string, 'elem'], [#this]],
    e
  ],
  bhPredic = [#elemMod :m :v] -> [
    #binop, '&&',
    [#getp, [#string, 'elemMods'], [#this]],
    [ #binop, '===',
      [#getp, m, [#getp, [#string, 'elemMods'], [#this]]],
      v
    ]
  ],
  bhPredic = [#xjst :e] -> e,
  bhPredic = [:m] -> [
    #binop, '===',
    [#getp, [#string, '_mode'], [#this]],
    [#string, m]
  ],

  bhBody = [#body :b] -> b,

  bhTemplate = [bhPredic+:ps bhBody:b] -> [
                #template,
                BEMHTMLToXJST.cons(ps),
                b
             ] | [#stmt anything]:r -> r,

  topLevel = [bhTemplate+:ts] -> ts,
  topLevel = bhTemplate:t -> [t],
  topLevel = end -> []
}

BEMHTMLToXJST.cons = function cons(arr) {
  return arr.reduce(function(prev, curr) {
    return ['binop', '&&', prev, curr];
  });
};

ometa XJSTToJS <: BSJSTranslator {
  applyStmt = :param -> { param.code || 'apply()' },

  nhApplyStmt = :param -> 'apply()',
  nhApplyExpr -> 'apply()',

  prop = [#getp [#string :p] [#this]] -> p
       | [#getp [#string :p] prop:p2] -> p2 + '.' + p,

  changes = [#binop ',' changes:l changes:r]:a -> l + ', ' + r
          | [#set prop:p trans:v] -> {
            JSON.stringify(p) + ': (' + v + ')'
          }
          | [#string :mode] -> '_mode: ' + JSON.stringify(mode)
          | [#json trans*:bindings] -> bindings.join(', ')
          | {
            throw new Error('Unsupported local' +
                            JSON.stringify(this._source.slice(this._offset)))
            "";
          },

  localStmt = changes:a :ast trans(ast):b -> {
    // New-style syntax
    if (ast[0] === 'parens' && ast[1][0] === 'func') {
      return 'local({ ' + a + ' })' + b + ';';
    }
    'local({ ' + a + ' })(function() { ' + b + '});'
  },
  localExpr = changes:a :ast trans(ast):b -> {
    // New-style syntax
    if (ast[0] === 'parens' && ast[1][0] === 'func') {
      return 'local({ ' + a + ' })' + b;
    }
    'local({ ' + a + ' })(function() { return ' + b + '})'
  },

  localStart = :as :vars -> '""',
  localEnd -> '""',

  predicates = [#binop '&&' predicates:l predicates:r] -> {
               l + ', ' + r
             } | trans:r -> 'function() { return ' + r + ' }',

  template = [#template predicates:m trans:b] -> (
    'match(' + m + ')(function() {' + b + '})'
  ),

  item = template:r -> r
       | [#stmt [#return anything]] -> ''
       | [#stmt
           [#unop '!'
             [#call [#func 'oninit' anything trans:body] anything*]
           ]
         ] -> 'oninit(function(exports) ' + body + ')'
       | [#stmt trans:r] -> r,
  topLevel = [ item*:rs ] -> 'var cache;\n' + rs.join(';\n')
}
