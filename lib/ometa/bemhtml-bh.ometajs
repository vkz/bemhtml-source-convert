var ometajs = require('ometajs'),
    bemhtml = require('./bemhtml'),
    bsjsid = ometajs.grammars.BSJSIdentity,
    BEMHTMLToXJST = bemhtml.BEMHTMLToXJST,
    BEMHTMLParser = bemhtml.BEMHTMLParser,
    lo = require('lodash');

function out() {
    console.log.apply(null, [">>> out::"].concat(lo.toArray(arguments), ['\n']));
}


function Classes() {
    this.c1 = [];
    this.c2 = [];
    this.c3 = [];
}

Classes.prototype._bemFields = ['block', 'elem', 'mods', 'elemMods', '_mode', '_buf'];


Classes.prototype.addClass = function addClass(subClass) {
    // subClass is "1.2" ==> "1" ==> "c1"
    this['c' + subClass.split('.').shift()].push(subClass);
};

Classes.prototype.classifyPredic = function classifyPredic(predicObj) {
    predicObj.ctx && this.addClass('2.1');
    predicObj.bem && this.addClass('2.2');
    predicObj.custom && this.addClass('2.3');
}

ometa Parser <: BEMHTMLParser {

    topLevel  = ^topLevel

}

ometa PredicClassifier <: bsjsid {

    getp = [#string #ctx]:fd [#this]:x {this._predic.ctx = true}                                  -> [#getp, fd, x],

    getp = [#string :s ?(lo.contains(this._bemFields, s))]:fd [#this]:x {this._predic.bem = true} -> [#getp, fd, x],

    getp = [#string :s ?(lo.isString(s))]:fd [#this]:x {this._predic.custom = true}               -> [#getp, fd, x],

    getp = ^getp,

    classifyPredic :bemFields
                   %(this._predic = {'ctx': false, 'bem': false, 'custom': false})
                   %(this._bemFields = bemFields)
         = trans                                                                                  -> this._predic

}

ometa Classifier <: BEMHTMLToXJST {

    // each predicate starts with this prefix - artefact of parsing
    // step which should be ignored for classification
    bhPredic = [ #xjst [ 'unop' '!' [ 'getp' [ 'string' 'elem' ] [ 'this' ] ] ]:e ]         -> e,

    bhPredic = [ #xjst :e ]
               { this._class.classifyPredic(
                   PredicClassifier.match(e, 'classifyPredic', [this._class._bemFields])) } -> e,

    bhPredic = ^bhPredic,

    topLevel %( this._class = new Classes())
             = ^topLevel:t
               {this._class.addClass(t.length > 1 ? '1.2' : '1.1');}                        -> [].concat([this._class],t)

}
