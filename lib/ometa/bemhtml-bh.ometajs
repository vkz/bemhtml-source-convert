var ometajs = require('ometajs'),
    bp = require('../bp'),
    pp = bp.pp;
    xjstid = require('xjst').XJSTIdentity,
    bsjsparser = ometajs.grammars.BSJSParser,
    bsjsid = ometajs.grammars.BSJSIdentity,
    bsjstranslator = ometajs.grammars.BSJSTranslator,
    compatBemhtmlParser = require('../../node_modules/bemhtml-compat/lib/ometa/bemhtml').BEMHTMLParser,
    compatJail = require('../../node_modules/bemhtml-compat/lib/ometa/jail').Jail,
    util = require('util'),
    lo = require('lodash'),
    isBemField = lo.curry(lo.contains, ['block', 'elem', 'mods', 'elemMods', '_mode', '_buf']);

ometa PredicClassifier <: bsjsid {
    getp = [#string #ctx] [#this]
            { this._predic.ctx = true }
        | [#string :s ?(isBemField(s))] [#this]
                { this._predic.bem = true }
        | [#string anything] [#this]
                { this._predic.custom = true }
        | ^getp,

    classifyPredic
        %(this._predic = { ctx: false, bem: false, custom: false })
            = trans -> this._predic
}

ometa BodyClassifier <:  xjstid {
    getp = [#string #ctx] [#this]
            { this._body.ctx = true } |
        ^getp,

    nhApplyStmt :p { this._body.apply = true },
    nhApplyExpr { this._body.apply = true },
    applyStmt :p { this._body.apply = true },

    localStmt trans:as trans:t { this._body.apply = true },
    localExpr trans:as trans:t { this._body.apply = true },

    classifyBody
        %(this._body = { ctx: false, apply: false, js: false })
            = trans -> this._body
}

ometa Classifier <: xjstid {
    notElemPredic = [#unop '!' [#getp [#string #elem] [#this]]],
    customJsPredic = :p -> PredicClassifier.match(p, 'classifyPredic'),
    bhXjstPredic = [#xjst (
            notElemPredic
            | customJsPredic:p { this._class.classifyPredic(p) }
        )],

    bemPredic = [(#block | #blockMod | #elem | #elemMod) anything+],

    modePredic = [anything],

    bhPredic = bemPredic | bhXjstPredic | modePredic,

    customJsBody = [#begin [#stmt anything*]],
    anyBody = :b -> BodyClassifier.match(b, 'classifyBody'),
    bhBody = [#body (
            customJsBody
                { this._class.addClass('3.3') }
            | anyBody:b
                { this._class.addClass('3.1').classifyBody(b) }
        )],

    bhTemplate = [bhPredic+ bhBody] | [#stmt anything],

    start = [bhTemplate+] | bhTemplate | end,

    topLevel
        %(this._class = new bp.Classes())
            = start -> this._class
}

ometa Jail <: compatJail {
    applyNext trans:e -> [#applyNext, e],
    applyNext -> [#applyNext],
    applyCtx trans:e -> [#applyCtx, e],
    topLevel = ^topLevel:r -> r
}

ometa Parser <: compatBemhtmlParser {
    applyCase = "applyNext" "(" ")" -> [#applyNext]
        | "applyNext" "(" expr:e ")" -> [#applyNext, e]
        | "applyCtx" "(" expr:ctx ")" -> [#applyCtx, ctx],

    primExprHd = applyCase | ^primExprHd,

    stmt = applyCase | ^stmt,

}

// make sure my custom Jail grammar is called from parser's listBemMatchAndSet rule
Parser.prototype._jail = Jail;

ometa HashArg <: bsjsid {
    json trans*:props -> ([#seqStmts].concat(props)),
    binding :name {Parser.matchAll('this.' + name, 'stmt')}:prop :val -> ([#set, prop, val]),
}

// consider refactoring this grammar into a tree transformer with a
// separate one responsible for code generation
ometa XastToBh <: bsjstranslator {

    warn :msg = { this.pushWarn(msg) },

    // bemhtml parser adds an extra 'undefined' statement to some template bodies
    // ignore them
    stmt [#get #undefined] -> '',
    stmt = ^stmt,

    seqStmts = trans*:ts
        ->  lo.reduce(ts, function(ac, stmt) { return ac + stmt + (stmt ? ';' : '') }, ''),

    contextMethods = 'isFirst' | 'isLast' | 'generateId' | 'extend' | 'isSimple',
    thisCtx = [ 'string' 'ctx' ] [ 'this' ],
    thisPosition = [ 'string' 'position' ]:p [ 'this' ] -> p,
    thisMethods = [ 'string' contextMethods ]:m [ 'this' ] -> m,
    thisBlockOrElem = ['string' ('block' | 'elem') ]:p [ 'this' ] -> p,
    this_mode = ['string' '_mode' ]:p [ 'this' ] -> p,
    this_ = ['string' '_'] ['this'],
    thisMods = [ 'string' ('mods' | 'elemMods') ] [ 'this' ],
    getpThisMods = ['getp' thisMods],

    set = [ #getp :p getpThisMods ] :v trans(astOf.mod(p, v))
        | [ #getp :p [ #this ]] :v trans(astOf.tParam(p, v))
        | ^ set,

    getp =  thisCtx trans(astOf.json)
        | thisPosition:p trans([#call, astOf.getp(p)])
        | thisMethods:m trans(astOf.getp(m))
        | thisBlockOrElem:p trans(astOf.getp(p, astOf.json)):res (
                ?(this._isPredic) warn('this.block or this.elem in predicate')  -> res
                | -> res)
        | this_mode:p warn('this._mode detected - bh does not support custom modes')
                trans(astOf.getp(p, astOf.json)):res -> res
        | this_ trans([#get, 'ctx'])
        | :p getpThisMods trans(astOf.mod(p))
        | :p [ #this ]  trans(astOf.tParam(p))
        | ^getp,

    applyNext = :e (inDefaultMode { HashArg.match(e, 'trans') }:arg trans(arg)
                     | warn('returning result of applyNext(args)'))
        | ~inDefaultMode warn('returning result of applyNext()') trans(astOf[this._m]())
        | inDefaultMode -> '',

    applyCtx = :e trans([#return, e]),

    isJson [#json (anything*)],
    isArray [#arr (anything*)],

    defaultModeBody :b -> b,

    mixModeBody :body = (isJson(body) -> [#arr, body]
            | isArray(body) -> body
            | warn('in mix: Object or Array expected, avoid arbitrary Javascript in mix body')
        ):m -> [#stmt,
            astOf.mix(
                astOf.callMethod('concat', m)(
                    astOf.mix()))],

    jsModeBody trans:body -> [#stmt,
        astOf.js(
            this.parse('this.ctx.js !== false ? this.extend(this.ctx.js,' + body + ') : false'))],

    attrsModeBody :body -> [#stmt,
        astOf.attrs(
            astOf.callMethod('extend', ['this'])(
                body,
                astOf.attrs()))],

    otherModeBody :body -> [#stmt,
        astOf.callCtx(['string', this._m])(
            body,
            ['get', 'true'])],

    _mode :m %(this._m = m)  { m + 'ModeBody' }:mode bhBody:body =
        {console.log('!!!!!!!!!!!', this._m, mode);}
        apply(mode in this ? mode : 'otherModeBody', body):bodyAst
        trans(bodyAst),

    _mode0 bhBody:body (
        'default' %(this._mode = true) -> body
        | 'mix' mixBody(body)
        | 'js' jsBody(body)
        | 'attrs' attrsBody(body)
        | :mode otherModeBody(mode, body)
        ):bodyAst trans(bodyAst),

    inDefaultMode = ?(this._m === 'default'),

    bhBody = [#body [#begin [#return :b]]] -> b
        | [#body [#begin [#stmt [#return :b]]]] -> b
        | [#body [#begin (anything*):ss]] inDefaultMode -> ([#seqStmts].concat(ss))
        | [#body :b] -> astOf.iif(b),

    bemPredic = [(#block | #blockMod | #elem | #elemMod):h trans+:b] -> [h].concat(b),
    modePredic = [:m] -> [#_mode, m],
    notElemPredic = [#xjst [#unop '!' [#getp [#string #elem] [#this]]]] -> [#_notElemPredic],
    customJsPredic = [#xjst trans:e] -> [#pred, e],
    bhPredic
        %(this._isPredic = true)
            = bemPredic | modePredic | notElemPredic | customJsPredic,

    bhTemplate = [
            bhPredic+:ps
            { this._extractBem(ps) }:p
            :body
            apply('_mode', p.mode, body):b
         ] -> { p.body = body; p.b = b; return p; },

    topLevel = [bhTemplate+:ts] { this._bhMatches(ts) }:ms
        -> {
            if(this.warnings) {
                var err = new Error();
                err.warnings = this.warnings;
                err.message = 'Problems detected\n' + bp.formatWarnings(err);
                throw err;
            }
            return new bp.Bh('module.exports = function(bh) {' + ms + '}');
        }
}

function astOfCall(method, ofWhat) {
    return function() {
        return ['call', ['getp',
                lo.isString(method)? ['string', method] : method,
                lo.isString(ofWhat)? ['get', ofWhat] : ofWhat]
            ].concat(lo.toArray(arguments));
    }
}

var astOfCtxCall = lo.partialRight(astOfCall, 'ctx');

XastToBh.prototype.pushWarn = function pushWarn(msg) {
    (this.warnings || (this.warnings = [])).push(msg);
    // report accumulated warnings if ometa rule-matching fails
    // see grammars.js in ometa-js for details
    (this._errorStack || (this._errorStack = new Error()))
        .warnings = this.warnings;
}

XastToBh.prototype.parse = function parse(code) {
    return bsjsparser.matchAll(code, 'stmt');
}

var astOf = XastToBh.prototype.astOf = lo.merge(
    ['content', 'applyBase', 'mod', 'attrs', 'tParam', 'mix', 'js'].reduce(function(acc, n) {
        acc[n] = astOfCtxCall(n);
        return acc
    }, {}),
    {
        json: ['get', 'json'],
        getp: function(field, from) {
            return ['getp',
                lo.isString(field)? ['stirng', field] : field,
                from || ['get', 'ctx']];
        },
        iif: function(body) { return ['call', [ 'func', null, [], body]];},
        stmt: function() { return ['stmt'].concat(lo.toArray(arguments)); },
        callMethod: astOfCtxCall,
        callCtx: astOfCtxCall
    }
);

XastToBh.prototype._extractBem = function extractBem(predicates) {
    var block = '',
        blockMod = '',
        elem = '',
        elemMod = '',
        mode,
        preds = [];

    function parseRest(rest) {
        var rest1 = JSON.parse(rest[1]);
        return rest.length === 2?
            rest1 :
            rest1 + '_' + JSON.parse(rest[2]);
    }

    predicates.forEach(function(p) {
        var head = p[0];
        switch(head) {
            case 'block':
                block = parseRest(p)
                break;
            case 'elem':
                elem = '__' + parseRest(p);
                break;
            case 'blockMod':
                blockMod = '_' + parseRest(p);
                break;
            case 'elemMod':
                elemMod = '_' + parseRest(p)
                break;
            case '_mode':
                mode = p[1];
                break;
            case '_notElemPredic':
                break;
            default:
                preds.push(lo.rest(p));
        };
    });
    return {
        bem: block + blockMod + elem + elemMod,
        predicates: preds,
        mode: mode || unsupportedMode
    };
}

XastToBh.prototype._bhMatches = function _bhMatches(ts) {
    var result = lo(ts)
        .groupBy('bem')
        .map(this._nestTemplates)
        .reduce(function(a, s){ return a + s }, '');
    //pp(lo(ts).groupBy('bem').value(), {prompt: 'grouped'});
    return result;
}

XastToBh.prototype._between = function _between(ar, sep, sepSecond) {
    var len = ar.length;
    sep = sep ? sep : '"_"';
    function separator(v) {return sep};
    return sepSecond ?
        lo.flatten(lo.zip(ar, lo.range(len).map(separator)).slice(0, len - 1)) :             //chop off redundant sep
    lo.zip(lo.range(len).map(separator), ar);
}

// might be sensible to rewrite this using xjst, seeing how it its pattern
XastToBh.prototype._nestTemplates = function _nestTemplates(ts, bem) {

    // find default mode and return it's body-string, empty string otherwise
    // remove it from ts
    function extractDefault() {
        var defMode = [ '_mode', [ 'string', 'default' ] ],
            isDefault = function(t){return lo.isEqual(t.mode, defMode);},
            defIndex = lo.findIndex(ts, isDefault);
        return defIndex >= 0 ? ts.splice(defIndex, 1).pop().b : '';
    }

    function diffPredicates(from, which) {
        return lo.reject(
            from,
            function (pf) {return lo.any(which,
                              function (pw) {return lo.isEqual(pf, pw)})})}

    function _nestTemplate(t, predicates) {
        var t, restOfPredicates;

        // nesting
        restOfPredicates = diffPredicates(t.predicates, predicates);
        return restOfPredicates.length > 0 ?
            'if(' + restOfPredicates.join(' && ') + '){' +
            _nestTemplate(t, lo.union(predicates, restOfPredicates)) + '}' :
            t.b + ';';
    }

    return 'bh.match(' + JSON.stringify(bem) + ', function (ctx, json) {'  +
        extractDefault() + ts
            .map(function(t) {return _nestTemplate(t, []);})
            .reduce(function(a, s){return a + s;}, '') + '});';
}

// Example: concatCodeStrings('"hi"', '"_"', '"bob"') returns '"hi_bob"'
XastToBh.prototype._concatCode = function concatCodeStrings() {
    return JSON.stringify(
        lo(arguments).
            toArray().
            flatten().
            map(JSON.parse).
            reduce(function(ac, s) {return ac + s;}, ''));
}
